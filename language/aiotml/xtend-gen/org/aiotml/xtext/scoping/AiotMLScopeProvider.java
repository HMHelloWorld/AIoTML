/**
 * generated by Xtext 2.10.0
 */
package org.aiotml.xtext.scoping;

import com.google.common.base.Objects;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.aiotml.xtext.aiotML.AiotMLPackage;
import org.aiotml.xtext.aiotML.Append;
import org.aiotml.xtext.aiotML.ConfigPropertyAssign;
import org.aiotml.xtext.aiotML.Configuration;
import org.aiotml.xtext.aiotML.Connector;
import org.aiotml.xtext.aiotML.CpropertyAssignment;
import org.aiotml.xtext.aiotML.CpropertyReference;
import org.aiotml.xtext.aiotML.Decrement;
import org.aiotml.xtext.aiotML.DictAssignment;
import org.aiotml.xtext.aiotML.EnumLiteralRef;
import org.aiotml.xtext.aiotML.Event;
import org.aiotml.xtext.aiotML.EventReference;
import org.aiotml.xtext.aiotML.ExternalConnector;
import org.aiotml.xtext.aiotML.Handler;
import org.aiotml.xtext.aiotML.Increment;
import org.aiotml.xtext.aiotML.Instance;
import org.aiotml.xtext.aiotML.Port;
import org.aiotml.xtext.aiotML.PropertyAssign;
import org.aiotml.xtext.aiotML.PropertyReference;
import org.aiotml.xtext.aiotML.ReceiveMessage;
import org.aiotml.xtext.aiotML.SendAction;
import org.aiotml.xtext.aiotML.Session;
import org.aiotml.xtext.aiotML.StartSession;
import org.aiotml.xtext.aiotML.State;
import org.aiotml.xtext.aiotML.StateContainer;
import org.aiotml.xtext.aiotML.StrategyAssignment;
import org.aiotml.xtext.aiotML.StrategyStream;
import org.aiotml.xtext.aiotML.Template;
import org.aiotml.xtext.aiotML.Thing;
import org.aiotml.xtext.aiotML.Transition;
import org.aiotml.xtext.aiotML.VariableAssignment;
import org.aiotml.xtext.aiotML.ZipEnumerate;
import org.aiotml.xtext.constraints.AiotMLHelpers;
import org.aiotml.xtext.helpers.AiotMLElementHelper;
import org.aiotml.xtext.helpers.ConfigurationHelper;
import org.aiotml.xtext.scoping.AbstractAiotMLScopeProvider;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.ENamedElement;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class AiotMLScopeProvider extends AbstractAiotMLScopeProvider {
  private final AiotMLPackage p = AiotMLPackage.eINSTANCE;
  
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if ((Objects.equal(reference, this.p.getPort_Receives()) || Objects.equal(reference, this.p.getPort_Sends()))) {
      return this.scopeForPort_SendsReceives(((Port) context));
    } else {
      EReference _sendAction_Port = this.p.getSendAction_Port();
      boolean _equals = Objects.equal(reference, _sendAction_Port);
      if (_equals) {
        return this.scopeForSendAction_Port(((SendAction) context));
      } else {
        EReference _sendAction_Message = this.p.getSendAction_Message();
        boolean _equals_1 = Objects.equal(reference, _sendAction_Message);
        if (_equals_1) {
          return this.scopeForSendAction_Message(((SendAction) context));
        } else {
          EReference _configPropertyAssign_Property = this.p.getConfigPropertyAssign_Property();
          boolean _equals_2 = Objects.equal(reference, _configPropertyAssign_Property);
          if (_equals_2) {
            return this.scopeForConfigPropertyAssign_Property(((ConfigPropertyAssign) context));
          } else {
            if ((Objects.equal(reference, this.p.getConnector_Cli()) || Objects.equal(reference, this.p.getConnector_Srv()))) {
              return this.scopeForConnector_CliSrV(((Connector) context));
            } else {
              EReference _connector_Provided = this.p.getConnector_Provided();
              boolean _equals_3 = Objects.equal(reference, _connector_Provided);
              if (_equals_3) {
                return this.scopeForConnector_Provided(((Connector) context));
              } else {
                EReference _connector_Required = this.p.getConnector_Required();
                boolean _equals_4 = Objects.equal(reference, _connector_Required);
                if (_equals_4) {
                  return this.scopeForConnector_Required(((Connector) context));
                } else {
                  EReference _decrement_Var = this.p.getDecrement_Var();
                  boolean _equals_5 = Objects.equal(reference, _decrement_Var);
                  if (_equals_5) {
                    return this.scopeForDecrement_Var(((Decrement) context));
                  } else {
                    EReference _enumLiteralRef_Enum = this.p.getEnumLiteralRef_Enum();
                    boolean _equals_6 = Objects.equal(reference, _enumLiteralRef_Enum);
                    if (_equals_6) {
                      return this.scopeForEnumLiteralRef_Enum(((EnumLiteralRef) context));
                    } else {
                      EReference _enumLiteralRef_Literal = this.p.getEnumLiteralRef_Literal();
                      boolean _equals_7 = Objects.equal(reference, _enumLiteralRef_Literal);
                      if (_equals_7) {
                        return this.scopeForEnumLiteralRef_Literal(((EnumLiteralRef) context));
                      } else {
                        EReference _externalConnector_Port = this.p.getExternalConnector_Port();
                        boolean _equals_8 = Objects.equal(reference, _externalConnector_Port);
                        if (_equals_8) {
                          return this.scopeForExternalConnector_Port(((ExternalConnector) context));
                        } else {
                          EReference _externalConnector_Protocol = this.p.getExternalConnector_Protocol();
                          boolean _equals_9 = Objects.equal(reference, _externalConnector_Protocol);
                          if (_equals_9) {
                            return this.scopeForExternalConnector_Protocol(((ExternalConnector) context));
                          } else {
                            if ((Objects.equal(reference, this.p.getFunctionCallExpression_Function()) || Objects.equal(reference, this.p.getFunctionCallStatement_Function()))) {
                              return this.scopeForFunctionCallExpressionFunctionCallStatement_Function(context);
                            } else {
                              EReference _increment_Var = this.p.getIncrement_Var();
                              boolean _equals_10 = Objects.equal(reference, _increment_Var);
                              if (_equals_10) {
                                return this.scopeForIncrement_Var(((Increment) context));
                              } else {
                                EReference _instance_Type = this.p.getInstance_Type();
                                boolean _equals_11 = Objects.equal(reference, _instance_Type);
                                if (_equals_11) {
                                  return this.scopeForInstance_Type(((Instance) context));
                                } else {
                                  EReference _propertyAssign_Property = this.p.getPropertyAssign_Property();
                                  boolean _equals_12 = Objects.equal(reference, _propertyAssign_Property);
                                  if (_equals_12) {
                                    return this.scopeForPropertyAssign_Property(((PropertyAssign) context));
                                  } else {
                                    EReference _propertyReference_Property = this.p.getPropertyReference_Property();
                                    boolean _equals_13 = Objects.equal(reference, _propertyReference_Property);
                                    if (_equals_13) {
                                      return this.scopeForPropertyReference_Property(((PropertyReference) context));
                                    } else {
                                      EReference _receiveMessage_Port = this.p.getReceiveMessage_Port();
                                      boolean _equals_14 = Objects.equal(reference, _receiveMessage_Port);
                                      if (_equals_14) {
                                        return this.scopeForReceiveMessage_Port(((ReceiveMessage) context));
                                      } else {
                                        EReference _receiveMessage_Message = this.p.getReceiveMessage_Message();
                                        boolean _equals_15 = Objects.equal(reference, _receiveMessage_Message);
                                        if (_equals_15) {
                                          return this.scopeForReceiveMessage_Message(((ReceiveMessage) context));
                                        } else {
                                          EReference _startSession_Session = this.p.getStartSession_Session();
                                          boolean _equals_16 = Objects.equal(reference, _startSession_Session);
                                          if (_equals_16) {
                                            return this.scopeForStartSession_Session(((StartSession) context));
                                          } else {
                                            EReference _thing_Includes = this.p.getThing_Includes();
                                            boolean _equals_17 = Objects.equal(reference, _thing_Includes);
                                            if (_equals_17) {
                                              return this.scopeForThing_Includes(((Thing) context));
                                            } else {
                                              EReference _transition_Target = this.p.getTransition_Target();
                                              boolean _equals_18 = Objects.equal(reference, _transition_Target);
                                              if (_equals_18) {
                                                return this.scopeForTransition_Target(((Transition) context));
                                              } else {
                                                EReference _typeRef_Type = this.p.getTypeRef_Type();
                                                boolean _equals_19 = Objects.equal(reference, _typeRef_Type);
                                                if (_equals_19) {
                                                  return this.scopeForTypeRef_Type(context);
                                                } else {
                                                  EReference _castExpression_Type = this.p.getCastExpression_Type();
                                                  boolean _equals_20 = Objects.equal(reference, _castExpression_Type);
                                                  if (_equals_20) {
                                                    return this.scopeForCastExpression_Type(context);
                                                  } else {
                                                    EReference _variableAssignment_Property = this.p.getVariableAssignment_Property();
                                                    boolean _equals_21 = Objects.equal(reference, _variableAssignment_Property);
                                                    if (_equals_21) {
                                                      return this.scopeForVariableAssignment_Property(((VariableAssignment) context));
                                                    } else {
                                                      EReference _variableAssignment_ExtraProperty = this.p.getVariableAssignment_ExtraProperty();
                                                      boolean _equals_22 = Objects.equal(reference, _variableAssignment_ExtraProperty);
                                                      if (_equals_22) {
                                                        return this.scopeForVariableAssignment_ExtraProperty(((VariableAssignment) context));
                                                      } else {
                                                        EReference _cpropertyAssignment_Cpropertys = this.p.getCpropertyAssignment_Cpropertys();
                                                        boolean _equals_23 = Objects.equal(reference, _cpropertyAssignment_Cpropertys);
                                                        if (_equals_23) {
                                                          return this.scopeForCpropertyAssignment_CPropertys(((CpropertyAssignment) context));
                                                        } else {
                                                          EReference _cpropertyAssignment_Property = this.p.getCpropertyAssignment_Property();
                                                          boolean _equals_24 = Objects.equal(reference, _cpropertyAssignment_Property);
                                                          if (_equals_24) {
                                                            return this.scopeForCpropertyAssignment_Property(((CpropertyAssignment) context));
                                                          } else {
                                                            EReference _strategyStream_Inputs = this.p.getStrategyStream_Inputs();
                                                            boolean _equals_25 = Objects.equal(reference, _strategyStream_Inputs);
                                                            if (_equals_25) {
                                                              return this.scopeForStrategyStream_Inputs(((StrategyStream) context));
                                                            } else {
                                                              EReference _strategyStream_Strategy = this.p.getStrategyStream_Strategy();
                                                              boolean _equals_26 = Objects.equal(reference, _strategyStream_Strategy);
                                                              if (_equals_26) {
                                                                return this.scopeForStrategyStream_Strategy(((StrategyStream) context));
                                                              } else {
                                                                EReference _strategyStream_Outputs = this.p.getStrategyStream_Outputs();
                                                                boolean _equals_27 = Objects.equal(reference, _strategyStream_Outputs);
                                                                if (_equals_27) {
                                                                  return this.scopeForStrategyStream_Outputs(((StrategyStream) context));
                                                                } else {
                                                                  EReference _strategyAssignment_Strategy = this.p.getStrategyAssignment_Strategy();
                                                                  boolean _equals_28 = Objects.equal(reference, _strategyAssignment_Strategy);
                                                                  if (_equals_28) {
                                                                    return this.scopeForStrategyAssignment_strategy(((StrategyAssignment) context));
                                                                  } else {
                                                                    EReference _strategyAssignment_Agent = this.p.getStrategyAssignment_Agent();
                                                                    boolean _equals_29 = Objects.equal(reference, _strategyAssignment_Agent);
                                                                    if (_equals_29) {
                                                                      return this.scopeForStrategyAssignment_agent(((StrategyAssignment) context));
                                                                    } else {
                                                                      EReference _strategyAssignment_RbindFunction = this.p.getStrategyAssignment_RbindFunction();
                                                                      boolean _equals_30 = Objects.equal(reference, _strategyAssignment_RbindFunction);
                                                                      if (_equals_30) {
                                                                        return this.scopeForStrategyAssignment_rbindFunction(((StrategyAssignment) context));
                                                                      } else {
                                                                        EReference _strategyAssignment_ObindFunction = this.p.getStrategyAssignment_ObindFunction();
                                                                        boolean _equals_31 = Objects.equal(reference, _strategyAssignment_ObindFunction);
                                                                        if (_equals_31) {
                                                                          return this.scopeForStrategyAssignment_obindFunction(((StrategyAssignment) context));
                                                                        } else {
                                                                          EAttribute _template_Path = this.p.getTemplate_Path();
                                                                          boolean _equals_32 = Objects.equal(reference, _template_Path);
                                                                          if (_equals_32) {
                                                                            return this.scopeForTemplate_path(((Template) context));
                                                                          } else {
                                                                            EReference _dictAssignment_Dict = this.p.getDictAssignment_Dict();
                                                                            boolean _equals_33 = Objects.equal(reference, _dictAssignment_Dict);
                                                                            if (_equals_33) {
                                                                              return this.scopeForDictAssignment_dict(((DictAssignment) context));
                                                                            } else {
                                                                              EReference _zipEnumerate_Vars = this.p.getZipEnumerate_Vars();
                                                                              boolean _equals_34 = Objects.equal(reference, _zipEnumerate_Vars);
                                                                              if (_equals_34) {
                                                                                return this.scopeForZipEnumerate_vars(((ZipEnumerate) context));
                                                                              } else {
                                                                                EAttribute _zipEnumerate_Fname = this.p.getZipEnumerate_Fname();
                                                                                boolean _equals_35 = Objects.equal(reference, _zipEnumerate_Fname);
                                                                                if (_equals_35) {
                                                                                  return this.scopeForZipEnumerate_fname(((ZipEnumerate) context));
                                                                                } else {
                                                                                  EReference _zipEnumerate_Sets = this.p.getZipEnumerate_Sets();
                                                                                  boolean _equals_36 = Objects.equal(reference, _zipEnumerate_Sets);
                                                                                  if (_equals_36) {
                                                                                    return this.scopeForZipEnumerate_sets(((ZipEnumerate) context));
                                                                                  } else {
                                                                                    EReference _append_Pythonlist = this.p.getAppend_Pythonlist();
                                                                                    boolean _equals_37 = Objects.equal(reference, _append_Pythonlist);
                                                                                    if (_equals_37) {
                                                                                      return this.scopeForAppend_Pythonlist(((Append) context));
                                                                                    } else {
                                                                                      EReference _cpropertyReference_Cpropertys = this.p.getCpropertyReference_Cpropertys();
                                                                                      boolean _equals_38 = Objects.equal(reference, _cpropertyReference_Cpropertys);
                                                                                      if (_equals_38) {
                                                                                        return this.scopeForCpropertyReference_CPropertys(((CpropertyReference) context));
                                                                                      } else {
                                                                                        EReference _cpropertyReference_Property = this.p.getCpropertyReference_Property();
                                                                                        boolean _equals_39 = Objects.equal(reference, _cpropertyReference_Property);
                                                                                        if (_equals_39) {
                                                                                          return this.scopeForCpropertyReference_Property(((CpropertyReference) context));
                                                                                        } else {
                                                                                          EReference _stateContainer_Initial = this.p.getStateContainer_Initial();
                                                                                          boolean _equals_40 = Objects.equal(reference, _stateContainer_Initial);
                                                                                          if (_equals_40) {
                                                                                            return this.scopeForStateContainer_Initial(((StateContainer) context));
                                                                                          } else {
                                                                                            EReference _eventReference_ReceiveMsg = this.p.getEventReference_ReceiveMsg();
                                                                                            boolean _equals_41 = Objects.equal(reference, _eventReference_ReceiveMsg);
                                                                                            if (_equals_41) {
                                                                                              return this.scopeForEventReference_ReceiveMsg(((EventReference) context));
                                                                                            } else {
                                                                                              EReference _eventReference_Parameter = this.p.getEventReference_Parameter();
                                                                                              boolean _equals_42 = Objects.equal(reference, _eventReference_Parameter);
                                                                                              if (_equals_42) {
                                                                                                return this.scopeForEventReference_Parameter(((EventReference) context));
                                                                                              } else {
                                                                                                EReference _startSession_Session_1 = this.p.getStartSession_Session();
                                                                                                boolean _equals_43 = Objects.equal(reference, _startSession_Session_1);
                                                                                                if (_equals_43) {
                                                                                                  return this.scopeForStartSession_Session(((StartSession) context));
                                                                                                } else {
                                                                                                  if ((((Objects.equal(reference, this.p.getConfigPropertyAssign_Instance()) || Objects.equal(reference, this.p.getConnector_Cli())) || Objects.equal(reference, this.p.getConnector_Srv())) || Objects.equal(reference, this.p.getExternalConnector_Inst()))) {
                                                                                                    return this.scopeForConfigurationInstances(AiotMLElementHelper.findContainingConfiguration(context));
                                                                                                  } else {
                                                                                                    String _name = reference.getName();
                                                                                                    String _plus = ("INFO: Resolving reference : " + _name);
                                                                                                    String _plus_1 = (_plus + " in Class ");
                                                                                                    EObject _eContainer = reference.eContainer();
                                                                                                    String _name_1 = ((ENamedElement) _eContainer).getName();
                                                                                                    String _plus_2 = (_plus_1 + _name_1);
                                                                                                    System.out.println(_plus_2);
                                                                                                  }
                                                                                                }
                                                                                              }
                                                                                            }
                                                                                          }
                                                                                        }
                                                                                      }
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return Scopes.scopeFor(this.EMPTY);
  }
  
  protected List EMPTY = Collections.EMPTY_LIST;
  
  protected IScope scopeForStateContainer_Initial(final StateContainer context) {
    return Scopes.scopeFor(context.getSubstate());
  }
  
  protected IScope scopeForConfigurationInstances(final Configuration context) {
    return Scopes.scopeFor(ConfigurationHelper.allInstances(context));
  }
  
  protected IScope scopeForSession_Initial(final Session context) {
    return Scopes.scopeFor(context.getSubstate());
  }
  
  protected IScope scopeForEventReference_ReceiveMsg(final EventReference context) {
    IScope _xblockexpression = null;
    {
      Handler h = AiotMLHelpers.findContainingHandler(context);
      IScope _xifexpression = null;
      boolean _equals = Objects.equal(h, null);
      if (_equals) {
        _xifexpression = Scopes.scopeFor(this.EMPTY);
      } else {
        _xifexpression = Scopes.scopeFor(Arrays.<Event>asList(h.getEvent()));
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  protected IScope scopeForEventReference_Parameter(final EventReference context) {
    IScope _xifexpression = null;
    if (((!Objects.equal(context.getReceiveMsg(), null)) && (context.getReceiveMsg() instanceof ReceiveMessage))) {
      Event _receiveMsg = context.getReceiveMsg();
      _xifexpression = Scopes.scopeFor(((ReceiveMessage) _receiveMsg).getMessage().getParameters());
    } else {
      _xifexpression = Scopes.scopeFor(this.EMPTY);
    }
    return _xifexpression;
  }
  
  protected IScope scopeForPort_SendsReceives(final Port context) {
    EObject _eContainer = context.eContainer();
    return Scopes.scopeFor(AiotMLHelpers.allMessages(((Thing) _eContainer)));
  }
  
  protected IScope scopeForSendAction_Port(final SendAction context) {
    return Scopes.scopeFor(AiotMLHelpers.allPorts(AiotMLHelpers.findContainingThing(context)));
  }
  
  protected IScope scopeForSendAction_Message(final SendAction context) {
    return Scopes.scopeFor(context.getPort().getSends());
  }
  
  protected IScope scopeForConfigPropertyAssign_Property(final ConfigPropertyAssign context) {
    return Scopes.scopeFor(AiotMLHelpers.allProperties(context.getInstance().getType()));
  }
  
  protected IScope scopeForConnector_CliSrV(final Connector context) {
    EObject _eContainer = context.eContainer();
    return Scopes.scopeFor(ConfigurationHelper.allInstances(((Configuration) _eContainer)));
  }
  
  protected IScope scopeForConnector_Provided(final Connector context) {
    return Scopes.scopeFor(AiotMLHelpers.allProvidedPorts(context.getSrv().getType()));
  }
  
  protected IScope scopeForConnector_Required(final Connector context) {
    return Scopes.scopeFor(AiotMLHelpers.allRequiredPorts(context.getCli().getType()));
  }
  
  protected IScope scopeForDecrement_Var(final Decrement context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
  
  protected IScope scopeForEnumLiteralRef_Enum(final EnumLiteralRef context) {
    return Scopes.scopeFor(AiotMLHelpers.allEnumerations(AiotMLHelpers.findContainingModel(context)));
  }
  
  protected IScope scopeForEnumLiteralRef_Literal(final EnumLiteralRef context) {
    return Scopes.scopeFor(context.getEnum().getLiterals());
  }
  
  protected IScope scopeForExternalConnector_Port(final ExternalConnector context) {
    return Scopes.scopeFor(AiotMLHelpers.allPorts(context.getInst().getType()));
  }
  
  protected IScope scopeForExternalConnector_Protocol(final ExternalConnector context) {
    return Scopes.scopeFor(AiotMLHelpers.allProtocols(AiotMLHelpers.findContainingModel(context)));
  }
  
  protected IScope scopeForFunctionCallExpressionFunctionCallStatement_Function(final EObject context) {
    return Scopes.scopeFor(AiotMLHelpers.allFunctions(AiotMLHelpers.findContainingThing(context)));
  }
  
  protected IScope scopeForIncrement_Var(final Increment context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
  
  protected IScope scopeForInstance_Type(final Instance context) {
    return Scopes.scopeFor(AiotMLHelpers.allThings(AiotMLHelpers.findContainingModel(context)));
  }
  
  protected IScope scopeForPropertyAssign_Property(final PropertyAssign context) {
    IScope _xblockexpression = null;
    {
      final Thing t = AiotMLHelpers.findContainingThing(context);
      boolean _notEquals = (!Objects.equal(t, null));
      if (_notEquals) {
        return Scopes.scopeFor(AiotMLHelpers.allProperties(t));
      }
      final Instance i = AiotMLHelpers.findContainingInstance(context);
      boolean _notEquals_1 = (!Objects.equal(i, null));
      if (_notEquals_1) {
        return Scopes.scopeFor(AiotMLHelpers.allProperties(i.getType()));
      }
      _xblockexpression = Scopes.scopeFor(this.EMPTY);
    }
    return _xblockexpression;
  }
  
  protected IScope scopeForPropertyReference_Property(final PropertyReference context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
  
  protected IScope scopeForReceiveMessage_Port(final ReceiveMessage context) {
    return Scopes.scopeFor(AiotMLHelpers.allPorts(AiotMLHelpers.findContainingThing(context)));
  }
  
  protected IScope scopeForReceiveMessage_Message(final ReceiveMessage context) {
    return Scopes.scopeFor(context.getPort().getReceives());
  }
  
  protected IScope scopeForReference_Reference(final EObject context) {
    return Scopes.scopeFor(this.EMPTY);
  }
  
  protected IScope scopeForStartSession_Session(final StartSession context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleSessions(context));
  }
  
  protected IScope scopeForThing_Includes(final Thing context) {
    return Scopes.scopeFor(AiotMLHelpers.allThings(AiotMLHelpers.findContainingModel(context)));
  }
  
  protected IScope scopeForTransition_Target(final Transition context) {
    EObject _eContainer = context.eContainer();
    return Scopes.scopeFor(AiotMLHelpers.allValidTargetStates(((State) _eContainer)));
  }
  
  protected IScope scopeForTypeRef_Type(final EObject context) {
    return Scopes.scopeFor(AiotMLHelpers.allTypes(AiotMLHelpers.findContainingModel(context)));
  }
  
  protected IScope scopeForCastExpression_Type(final EObject context) {
    return Scopes.scopeFor(AiotMLHelpers.allTypes(AiotMLHelpers.findContainingModel(context)));
  }
  
  protected IScope scopeForVariableAssignment_Property(final VariableAssignment context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
  
  protected IScope scopeForVariableAssignment_ExtraProperty(final VariableAssignment context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
  
  protected IScope scopeForCpropertyAssignment_Property(final CpropertyAssignment context) {
    return Scopes.scopeFor(AiotMLHelpers.aAllSubthingPropertys(context));
  }
  
  protected IScope scopeForCpropertyAssignment_CPropertys(final CpropertyAssignment context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
  
  protected IScope scopeForCpropertyReference_CPropertys(final CpropertyReference context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
  
  protected IScope scopeForCpropertyReference_Property(final CpropertyReference context) {
    return Scopes.scopeFor(AiotMLHelpers.rAllSubthingPropertys(context));
  }
  
  protected IScope scopeForStrategyStream_Inputs(final StrategyStream context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
  
  protected IScope scopeForStrategyStream_Outputs(final StrategyStream context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
  
  protected IScope scopeForStrategyStream_Strategy(final StrategyStream context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
  
  protected IScope scopeForStrategyAssignment_strategy(final StrategyAssignment context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
  
  protected IScope scopeForStrategyAssignment_rbindFunction(final StrategyAssignment context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
  
  protected IScope scopeForStrategyAssignment_obindFunction(final StrategyAssignment context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
  
  protected IScope scopeForStrategyAssignment_agent(final StrategyAssignment context) {
    return Scopes.scopeFor(AiotMLHelpers.allActions(context));
  }
  
  protected IScope scopeForAppend_Pythonlist(final Append context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
  
  protected IScope scopeForTemplate_path(final Template context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
  
  protected IScope scopeForDictAssignment_dict(final DictAssignment context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
  
  protected IScope scopeForZipEnumerate_vars(final ZipEnumerate context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
  
  protected IScope scopeForZipEnumerate_fname(final ZipEnumerate context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
  
  protected IScope scopeForZipEnumerate_sets(final ZipEnumerate context) {
    return Scopes.scopeFor(AiotMLHelpers.allVisibleVariables(context));
  }
}
