thing TestSerialization includes Test @test `12345689A # 12345689A` {
	message m1()
	message m2(p : Char)
	message m3(p : Boolean)
	message m4(p : UInt8)
	message m5(p : UInt16)
	message m6(p : Int16)
	message m8(p : Int32)
	message m9(p : Double)
	message m10(p1 : Double, p2 : Double)
	provided port pin {
		receives m1 receives m2 receives m3 receives m4 receives m5 receives m6 receives m8 receives m9 receives m10
	}
	required port pout {
		sends m1 sends m2 sends m3 sends m4 sends m5 sends m6 sends m8 sends m9 sends m10
	}
	statechart Chart init Init {
		state Init {
			internal
			event e : Test?In
			guard e.c == '1'
			action pout!m1()
			internal
			event pin?m1
			action TestOut('1')
			internal
			event e : Test?In
			guard e.c == '2'
			action pout!m2('X')
			internal
			event e : pin?m2
			guard e.p == 'X'
			action TestOut('2')
			internal
			event e : Test?In
			guard e.c == '3'
			action pout!m3((1 == 1))
			internal
			event e : pin?m3
			guard e.p
			action TestOut('3')
			internal
			event e : Test?In
			guard e.c == '4'
			action pout!m4(128)
			internal
			event e : pin?m4
			guard e.p == 128
			action TestOut('4')
			internal
			event e : Test?In
			guard e.c == '5'
			action pout!m5(33825)
			internal
			event e : pin?m5
			guard e.p == 33825
			action TestOut('5')
			internal
			event e : Test?In
			guard e.c == '6'
			action pout!m6(-17441)
			internal
			event e : pin?m6
			guard e.p == -17441
			action TestOut('6')
			internal
			event e : Test?In
			guard e.c == '8'
			action pout!m8(-1446609953)
			internal
			event e : pin?m8
			guard e.p == -1446609953
			action TestOut('8')
			internal
			event e : Test?In
			guard e.c == '9'
			action pout!m9(-3.14156)
			internal
			event e : pin?m9
			guard e.p == -3.14156
			action TestOut('9')
			internal
			event e : Test?In
			guard e.c == 'A'
			action pout!m10(-3.14156, 3.14156)
			internal
			event e : pin?m10
			guard ((e.p1 == -3.14156) and (e.p2 == 3.14156))
			action TestOut('A')
			internal
			event Test?Done
			action TestDone()
		}
	}
}
datatype Byte<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
datatype Char<1>
	@type_checker `Integer`
	@c_type `char`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
datatype Boolean<1>
	@type_checker `Boolean`
	@c_type `bool`
	@java_type `boolean`
	@js_type `boolean`
	@go_type `bool`
datatype UInt8<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `int`
	@js_type `short`
	@go_type `uint8`
datatype Int8<1>
	@type_checker `Integer`
	@c_type `int8_t`
	@java_type `int`
	@js_type `short`
	@go_type `int8`
datatype UInt16<2>
	@type_checker `Integer`
	@c_type `uint16_t`
	@java_type `int`
	@js_type `int`
	@go_type `uint16`
datatype Int16<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
datatype Int32<4>
	@type_checker `Integer`
	@c_type `int32_t`
	@java_type `long`
	@js_type `int`
	@go_type `int32`
datatype UInt32<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
datatype Long<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
datatype Int64<8>
	@type_checker `Integer`
	@c_type `int64_t`
	@java_type `long`
	@js_type `long`
	@go_type `int64`
datatype UInt64<8>
	@type_checker `Integer`
	@c_type `uint64_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint64`
datatype Integer<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
datatype Float<4>
	@type_checker `Real`
	@c_type `float`
	@java_type `float`
	@js_type `float`
	@go_type `float32`
datatype Double<8>
	@type_checker `Real`
	@c_type `double`
	@java_type `double`
	@js_type `double`
	@go_type `float64`
object String
	@serializable
	@c_type `char *`
	@java_type `String`
	@js_type `String`
	@go_type `string`
enumeration DigitalState as UInt8 {
	LOW = 0
	HIGH = 1
}
thing fragment TestMsgs {
	message In(c : Char)
	message Out(c : Char)
	message Failure(reason : Char)
	message Done()
}
thing fragment Test includes TestMsgs , FileDumper {
	required port Test {
		sends Out sends Done sends Failure receives In receives Done
	}
	function TestOut(c : Char) do
		DumpWrite(c)
		Test!Out(c)
	end
	function TestDone() do
		Test!Done()
	end
	function TestFailure(reason : Char) do
		DumpFailure(reason)
		Test!Failure(reason)
		TestDone()
	end
}
thing TestHarness includes TestMsgs {
	provided port test {
		sends In sends Done
	}
	statechart Send init Chars {
		state Chars {
			on entry do
				test!In('1')
				test!In('2')
				test!In('3')
				test!In('4')
				test!In('5')
				test!In('6')
				test!In('8')
				test!In('9')
				test!In('A')
				test!Done()
			end
		}
	}
}
thing fragment FileDumper @go_import `os` {
	property DumpPath : String
	function DumpWrite(C : Char) do
		`file, err := os.OpenFile(` & DumpPath & `, os.O_APPEND|os.O_RDWR, 0666)`
	`if err != nil {`
	`  panic(err)`
	`}`
	`defer file.Close()`
		`file.Write([]byte { ` & C & ` })`
	end
	function DumpFailure(Reason : Char) do
		DumpWrite('\n')
		DumpWrite('[')
		DumpWrite('F')
		DumpWrite('A')
		DumpWrite('I')
		DumpWrite('L')
		DumpWrite('U')
		DumpWrite('R')
		DumpWrite('E')
		DumpWrite(']')
		DumpWrite(' ')
		DumpWrite(Reason)
		DumpWrite('\n')
	end
}
thing Synchronizer includes TestMsgs @go_import `os` {
	provided port test_result {
		receives Done
	}
	property test_finished : Boolean = false
	function StopExecution(Code : Integer) do
	`if Code > 0 {`
		`  os.Exit(int(` & Code & `));`
	`}`
	`state.Runtime.StopWhenInactive()`
	end
	function CheckCompleted() : Boolean do
		var Completed : Boolean = true
		if (not test_finished) Completed = false
		return Completed
	end
	statechart Synchronize init Listen {
		state Listen {
			internal
			event test_result?Done
			action test_finished = true
			transition -> Stop guard (CheckCompleted())
		}
		final state Stop {
			on entry StopExecution(0)
		}
	}
}
configuration testconfiguration_generated {
	instance test : TestSerialization
	instance harness_generated : TestHarness
	instance synchronizer_generated : Synchronizer
	connector test.pout => test . pin
	connector test.Test => harness_generated . test
	connector test.Test => synchronizer_generated . test_result
	set test.DumpPath = "TestSerialization_1"
}
