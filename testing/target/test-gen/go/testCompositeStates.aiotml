thing TestCompositeStates includes Test @test `n # 01(0)?` @test `nn # 0123(20)?` @test `nni # 012320` @test `nnn # 012345(5420)?` @test `nnnoip # 01234554210` {
	statechart TestCompositeStates init I {
		state I {
			transition -> C1
			event m : Test?In
			guard m.c == 'n'
		}
		composite state C1 init C1S1 {
			on entry TestOut('0')
			on exit TestOut('0')
			state C1S1 {
				on entry TestOut('1')
				transition -> C1S2
				event m : Test?In
				guard m.c == 'n'
			}
			composite state C1S2 init C2S1 {
				on entry TestOut('2')
				on exit TestOut('2')
				state C2S1 {
					on entry TestOut('3')
					transition -> C2S3
					event m : Test?In
					guard m.c == 'n'
				}
				state C2S2 {
					on exit TestOut('3')
					transition -> C2S3
					event m : Test?In
					guard m.c == 'n'
				}
				composite state C2S3 init C3S1 {
					on entry TestOut('4')
					on exit TestOut('4')
					composite state C3S1 init C4S1 {
						on entry TestOut('5')
						on exit TestOut('5')
						state C4S1 {
						}
					}
					transition -> C2S2
					event m : Test?In
					guard m.c == 'p'
				}
				transition -> C1S1
				event m : Test?In
				guard m.c == 'o'
			}
			transition -> I
			event m : Test?In
			guard m.c == 'i'
		}
		internal
		event Test?Done
		action TestDone()
	}
}
datatype Byte<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
datatype Char<1>
	@type_checker `Integer`
	@c_type `char`
	@java_type `byte`
	@js_type `byte`
	@go_type `byte`
datatype Boolean<1>
	@type_checker `Boolean`
	@c_type `bool`
	@java_type `boolean`
	@js_type `boolean`
	@go_type `bool`
datatype UInt8<1>
	@type_checker `Integer`
	@c_type `uint8_t`
	@java_type `int`
	@js_type `short`
	@go_type `uint8`
datatype Int8<1>
	@type_checker `Integer`
	@c_type `int8_t`
	@java_type `int`
	@js_type `short`
	@go_type `int8`
datatype UInt16<2>
	@type_checker `Integer`
	@c_type `uint16_t`
	@java_type `int`
	@js_type `int`
	@go_type `uint16`
datatype Int16<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
datatype Int32<4>
	@type_checker `Integer`
	@c_type `int32_t`
	@java_type `long`
	@js_type `int`
	@go_type `int32`
datatype UInt32<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
datatype Long<4>
	@type_checker `Integer`
	@c_type `uint32_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint32`
datatype Int64<8>
	@type_checker `Integer`
	@c_type `int64_t`
	@java_type `long`
	@js_type `long`
	@go_type `int64`
datatype UInt64<8>
	@type_checker `Integer`
	@c_type `uint64_t`
	@java_type `long`
	@js_type `long`
	@go_type `uint64`
datatype Integer<2>
	@type_checker `Integer`
	@c_type `int16_t`
	@java_type `int`
	@js_type `short`
	@go_type `int16`
datatype Float<4>
	@type_checker `Real`
	@c_type `float`
	@java_type `float`
	@js_type `float`
	@go_type `float32`
datatype Double<8>
	@type_checker `Real`
	@c_type `double`
	@java_type `double`
	@js_type `double`
	@go_type `float64`
object String
	@serializable
	@c_type `char *`
	@java_type `String`
	@js_type `String`
	@go_type `string`
enumeration DigitalState as UInt8 {
	LOW = 0
	HIGH = 1
}
thing fragment TestMsgs {
	message In(c : Char)
	message Out(c : Char)
	message Failure(reason : Char)
	message Done()
}
thing fragment Test includes TestMsgs , FileDumper {
	required port Test {
		sends Out sends Done sends Failure receives In receives Done
	}
	function TestOut(c : Char) do
		DumpWrite(c)
		Test!Out(c)
	end
	function TestDone() do
		Test!Done()
	end
	function TestFailure(reason : Char) do
		DumpFailure(reason)
		Test!Failure(reason)
		TestDone()
	end
}
thing TestHarness includes TestMsgs {
	provided port testinstance1_generated {
		sends In sends Done
	}
	provided port testinstance1_copy1_generated {
		sends In sends Done
	}
	provided port testinstance1_copy2_generated {
		sends In sends Done
	}
	provided port testinstance1_copy3_generated {
		sends In sends Done
	}
	provided port testinstance1_copy4_generated {
		sends In sends Done
	}
	statechart Send init Chars {
		state Chars {
			on entry do
				testinstance1_generated!In('n')
				testinstance1_generated!Done()
				testinstance1_copy1_generated!In('n')
				testinstance1_copy1_generated!In('n')
				testinstance1_copy1_generated!Done()
				testinstance1_copy2_generated!In('n')
				testinstance1_copy2_generated!In('n')
				testinstance1_copy2_generated!In('i')
				testinstance1_copy2_generated!Done()
				testinstance1_copy3_generated!In('n')
				testinstance1_copy3_generated!In('n')
				testinstance1_copy3_generated!In('n')
				testinstance1_copy3_generated!Done()
				testinstance1_copy4_generated!In('n')
				testinstance1_copy4_generated!In('n')
				testinstance1_copy4_generated!In('n')
				testinstance1_copy4_generated!In('o')
				testinstance1_copy4_generated!In('i')
				testinstance1_copy4_generated!In('p')
				testinstance1_copy4_generated!Done()
			end
		}
	}
}
thing fragment FileDumper @go_import `os` {
	property DumpPath : String
	function DumpWrite(C : Char) do
		`file, err := os.OpenFile(` & DumpPath & `, os.O_APPEND|os.O_RDWR, 0666)`
	`if err != nil {`
	`  panic(err)`
	`}`
	`defer file.Close()`
		`file.Write([]byte { ` & C & ` })`
	end
	function DumpFailure(Reason : Char) do
		DumpWrite('\n')
		DumpWrite('[')
		DumpWrite('F')
		DumpWrite('A')
		DumpWrite('I')
		DumpWrite('L')
		DumpWrite('U')
		DumpWrite('R')
		DumpWrite('E')
		DumpWrite(']')
		DumpWrite(' ')
		DumpWrite(Reason)
		DumpWrite('\n')
	end
}
thing Synchronizer includes TestMsgs @go_import `os` {
	provided port testinstance1_generated_result {
		receives Done
	}
	provided port testinstance1_copy1_generated_result {
		receives Done
	}
	provided port testinstance1_copy2_generated_result {
		receives Done
	}
	provided port testinstance1_copy3_generated_result {
		receives Done
	}
	provided port testinstance1_copy4_generated_result {
		receives Done
	}
	property testinstance1_generated_finished : Boolean = false
	property testinstance1_copy1_generated_finished : Boolean = false
	property testinstance1_copy2_generated_finished : Boolean = false
	property testinstance1_copy3_generated_finished : Boolean = false
	property testinstance1_copy4_generated_finished : Boolean = false
	function StopExecution(Code : Integer) do
	`if Code > 0 {`
		`  os.Exit(int(` & Code & `));`
	`}`
	`state.Runtime.StopWhenInactive()`
	end
	function CheckCompleted() : Boolean do
		var Completed : Boolean = true
		if (not testinstance1_generated_finished) Completed = false
		if (not testinstance1_copy1_generated_finished) Completed = false
		if (not testinstance1_copy2_generated_finished) Completed = false
		if (not testinstance1_copy3_generated_finished) Completed = false
		if (not testinstance1_copy4_generated_finished) Completed = false
		return Completed
	end
	statechart Synchronize init Listen {
		state Listen {
			internal
			event testinstance1_generated_result?Done
			action testinstance1_generated_finished = true
			internal
			event testinstance1_copy1_generated_result?Done
			action testinstance1_copy1_generated_finished = true
			internal
			event testinstance1_copy2_generated_result?Done
			action testinstance1_copy2_generated_finished = true
			internal
			event testinstance1_copy3_generated_result?Done
			action testinstance1_copy3_generated_finished = true
			internal
			event testinstance1_copy4_generated_result?Done
			action testinstance1_copy4_generated_finished = true
			transition -> Stop guard (CheckCompleted())
		}
		final state Stop {
			on entry StopExecution(0)
		}
	}
}
configuration testconfiguration_generated {
	instance testinstance1_generated : TestCompositeStates
	instance testinstance1_copy1_generated : TestCompositeStates
	instance testinstance1_copy2_generated : TestCompositeStates
	instance testinstance1_copy3_generated : TestCompositeStates
	instance testinstance1_copy4_generated : TestCompositeStates
	instance harness_generated : TestHarness
	instance synchronizer_generated : Synchronizer
	connector testinstance1_generated.Test => harness_generated . testinstance1_generated
	connector testinstance1_copy1_generated.Test => harness_generated . testinstance1_copy1_generated
	connector testinstance1_copy2_generated.Test => harness_generated . testinstance1_copy2_generated
	connector testinstance1_copy3_generated.Test => harness_generated . testinstance1_copy3_generated
	connector testinstance1_copy4_generated.Test => harness_generated . testinstance1_copy4_generated
	connector testinstance1_generated.Test => synchronizer_generated . testinstance1_generated_result
	connector testinstance1_copy1_generated.Test => synchronizer_generated . testinstance1_copy1_generated_result
	connector testinstance1_copy2_generated.Test => synchronizer_generated . testinstance1_copy2_generated_result
	connector testinstance1_copy3_generated.Test => synchronizer_generated . testinstance1_copy3_generated_result
	connector testinstance1_copy4_generated.Test => synchronizer_generated . testinstance1_copy4_generated_result
	set testinstance1_generated.DumpPath = "TestCompositeStates_1"
	set testinstance1_copy1_generated.DumpPath = "TestCompositeStates_2"
	set testinstance1_copy2_generated.DumpPath = "TestCompositeStates_3"
	set testinstance1_copy3_generated.DumpPath = "TestCompositeStates_4"
	set testinstance1_copy4_generated.DumpPath = "TestCompositeStates_5"
}
